/**
 * angular-user-service
 * @version v0.0.1 - 2014-06-09
 * @link https://github.com/aronvaughan/angular-user-service
 * @author  <>
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
"use strict";angular.module("avaughan.user",["avaughan.logging","avaughan.login"]),angular.module("avaughan.user").provider("avUserService",function(){this.mockData=[{"class":"security.User",id:1,accountExpired:!1,accountLocked:!1,email:"aronvaughan@hotmail.com",enabled:!0,password:"8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",passwordExpired:!1,username:"mock admin"}],this.urlAfterLogin="/",this.userResourceUrl="api/userInfo/current",this.userNameVariable="username";var a=this;this.initialize=function(a,b,c,d){console.log("avaughan.user initialize called",[a,c,d]),d&&(this.mockData=d),c&&(this.urlAfterLogin=c),a&&(this.userResourceUrl=a),b&&(this.userNameVariable=b)},this.$get=["$rootScope","$resource","avLog","$location","avLogin","$cookieStore","$http",function(b,c,d,e,f,g,h){var i=this.userResourceUrl,j=new ServiceContainerConfig("avUserService",i,this.mockData,b,c,d);return j.urlAfterLogin=this.urlAfterLogin,j.$location=e,j.avLogin=f,j.mockExtend={fetchUser:function(){return this.logger.debug("mock user service, fetch user"),this.mockData[0]},login:function(a,b){return this.logger.debug("in mock mode, login",[a,b]),a===this.mockData[0].username?(this.logger.info("redirecting to "+this.urlAfterLogin),this.$location.path(this.urlAfterLogin),this.mockData[0]):void 0},logout:function(){}},j.realExtend={fetchUser:function(){this.logger.debug("user service, fetch user"),this.logger.debug("getting user data from remote");var c=this,d=this.user;return this.user=this.resource.get({},function(e,g){c.logger.debug("userData, fetchUser success callback: ",[e,a.userNameVariable,e[a.userNameVariable],g,d,f.isTokenAvailable(b)]),void 0!==e&&void 0!==e[a.userNameVariable]&&void 0===d&&f.isTokenAvailable(b)&&(c.logger.info("detected inital load with user token available"),f.loginConfirmed(e))}),this.logger.debug("got user",this.user),this.user},login:function(a,c){return this.logger.debug("login called",a),this.avLogin.login(a,c,h,b,g)},logout:function(){this.avLogin.logout(h,g,b)}},j.serviceExtend={checkedServer:!1,user:void 0,defaultUsername:"Guest",userNameVariable:this.userNameVariable,isLoggedIn:function(){return this.logger.debug("userService isLoggedIn ",this.getUser()),void 0!==this.getUser()&&void 0!==this.getUser()[this.userNameVariable]},getUser:function(){return this.logger.debug("user service, getUser",this.user),void 0===this.user&&(this.logger.debug("user service, getUser needs to fetch"),this.fetchUser()),this.user},getUsername:function(){return this.logger.debug("getUsername ",[this.user,this.userNameVariable]),this.getUser(),this.user&&this.user[this.userNameVariable]?this.user[this.userNameVariable]:this.defaultUsername},logout:function(){this.logger.debug("userService logout"),this.serviceRemote.logout(),this.resetAfterLogout()},login:function(a,b){return this.serviceRemote.login(a,b)},reset:function(){this.logger.debug("reset called"),this.checkedServer=!1,this.user=void 0},resetAfterLogout:function(){this.reset(),this.checkedServer=!0},setUser:function(a){this.logger.debug("set user",this.user),this.user=a,this.checkedServer=!0,this.logger.debug("set user exit",this.user)},fetchUser:function(){return this.logger.debug("user service, fetch user"),this.checkedServer?this.logger.debug("already checked, not checking again..."):(this.logger.debug("getting user data from user data impl"),this.user=this.serviceRemote.fetchUser(),this.setUser(this.user)),this.user},customInitialize:function(a,c){var d=this;this.logger.info("custom initialize hooking up auth events",[a,c]),this.$rootScope.$on("event:auth-loginConfirmed",function(a,b){d.logger.info("event:auth-loginConfirmed user service got session login event ",a),d.logger.info("user data",b),d.setUser(b)}),b.$on("event:auth-logoutConfirmed",function(a,b){d.logger.info("event:auth-logoutConfirmed",a),d.logger.info("data",b),d.resetAfterLogout()}),b.$on("event:auth-loginRequired",function(a,b){d.logger.info("event:auth-loginRequired! user service got session login event ",a),d.logger.info("data",b)}),b.$on("event:auth-loginCancelled",function(a,b){d.logger.info("event:auth-auth-loginCancelled user service got session login event ",a),d.logger.info(" data",b)})}},j.createService()}]});